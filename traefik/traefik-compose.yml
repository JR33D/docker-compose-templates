version: "3.3"

services:
  traefik:
    image: "traefik:latest"
    command:
      - "--configFile=~/docker/traefik/traefik.yml:/traefik.yml"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /home/piadmin/docker/traefik/letsencrypt:/letsencrypt
      - /home/piadmin/docker/traefik/traefik.yml:/traefik.yml:ro
    labels:
      - "traefik.http.routers.api.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.api.entrypoints=dashboard"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`, `/dashboard`)"
      - "traefik.http.routers.api.service=api@internal"
    networks:
      - web-public
      - web-private
      - socket-proxy
    #I don't think this constraint is required since the socket-proxy is on a manager.
    deploy:
      placement:
        constraints:
          - node.role == manager

  #This is the entry point into the docker socket.
  #It is not recommended to have a container with exposed ports also
  #have access to the docker socket. This container also locks down the
  #docker socket to a subset of GET commands only.
  socket-proxy:
    image: tecnativa/docker-socket-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      CONTAINERS: 1
      SERVICES: 1
      NODES: 1
      NETWORKS: 1
      TASKS: 1
      VERSION: 1
    networks:
      - socket-proxy
    deploy:
      placement:
        constraints:
          - node.role == manager

networks:
  web-public:
    external: true
  web-private:
    external: true
  socket-proxy:
    internal: true
    #Uncomment to enable network encryption between traefik and the socket proxy
    #driver_opts:
    #  encrypted: ""

volumes:
  letsencrypt:
    driver: local